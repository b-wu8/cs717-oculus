// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_game_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_game_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_game_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_game_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_game_2eproto;
namespace ADS {
class DeviceInfo;
struct DeviceInfoDefaultTypeInternal;
extern DeviceInfoDefaultTypeInternal _DeviceInfo_default_instance_;
class GameObject;
struct GameObjectDefaultTypeInternal;
extern GameObjectDefaultTypeInternal _GameObject_default_instance_;
class Player;
struct PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
class Position;
struct PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class Rotation;
struct RotationDefaultTypeInternal;
extern RotationDefaultTypeInternal _Rotation_default_instance_;
class Session;
struct SessionDefaultTypeInternal;
extern SessionDefaultTypeInternal _Session_default_instance_;
class Vector2;
struct Vector2DefaultTypeInternal;
extern Vector2DefaultTypeInternal _Vector2_default_instance_;
}  // namespace ADS
PROTOBUF_NAMESPACE_OPEN
template<> ::ADS::DeviceInfo* Arena::CreateMaybeMessage<::ADS::DeviceInfo>(Arena*);
template<> ::ADS::GameObject* Arena::CreateMaybeMessage<::ADS::GameObject>(Arena*);
template<> ::ADS::Player* Arena::CreateMaybeMessage<::ADS::Player>(Arena*);
template<> ::ADS::Position* Arena::CreateMaybeMessage<::ADS::Position>(Arena*);
template<> ::ADS::Rotation* Arena::CreateMaybeMessage<::ADS::Rotation>(Arena*);
template<> ::ADS::Session* Arena::CreateMaybeMessage<::ADS::Session>(Arena*);
template<> ::ADS::Vector2* Arena::CreateMaybeMessage<::ADS::Vector2>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ADS {

// ===================================================================

class Player final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ADS.Player) */ {
 public:
  inline Player() : Player(nullptr) {}
  ~Player() override;
  explicit constexpr Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Player(const Player& from);
  Player(Player&& from) noexcept
    : Player() {
    *this = ::std::move(from);
  }

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline Player& operator=(Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const Player* internal_default_instance() {
    return reinterpret_cast<const Player*>(
               &_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Player& a, Player& b) {
    a.Swap(&b);
  }
  inline void Swap(Player* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Player>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Player& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Player& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Player* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ADS.Player";
  }
  protected:
  explicit Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerNameFieldNumber = 1,
    kHeadsetFieldNumber = 2,
    kLeftControllerFieldNumber = 3,
    kRightControllerFieldNumber = 4,
    kLeftJoystickFieldNumber = 5,
    kRightJoystickFieldNumber = 6,
  };
  // string player_name = 1;
  void clear_player_name();
  const std::string& player_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player_name();
  PROTOBUF_NODISCARD std::string* release_player_name();
  void set_allocated_player_name(std::string* player_name);
  private:
  const std::string& _internal_player_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_name(const std::string& value);
  std::string* _internal_mutable_player_name();
  public:

  // .ADS.DeviceInfo headset = 2;
  bool has_headset() const;
  private:
  bool _internal_has_headset() const;
  public:
  void clear_headset();
  const ::ADS::DeviceInfo& headset() const;
  PROTOBUF_NODISCARD ::ADS::DeviceInfo* release_headset();
  ::ADS::DeviceInfo* mutable_headset();
  void set_allocated_headset(::ADS::DeviceInfo* headset);
  private:
  const ::ADS::DeviceInfo& _internal_headset() const;
  ::ADS::DeviceInfo* _internal_mutable_headset();
  public:
  void unsafe_arena_set_allocated_headset(
      ::ADS::DeviceInfo* headset);
  ::ADS::DeviceInfo* unsafe_arena_release_headset();

  // .ADS.DeviceInfo left_controller = 3;
  bool has_left_controller() const;
  private:
  bool _internal_has_left_controller() const;
  public:
  void clear_left_controller();
  const ::ADS::DeviceInfo& left_controller() const;
  PROTOBUF_NODISCARD ::ADS::DeviceInfo* release_left_controller();
  ::ADS::DeviceInfo* mutable_left_controller();
  void set_allocated_left_controller(::ADS::DeviceInfo* left_controller);
  private:
  const ::ADS::DeviceInfo& _internal_left_controller() const;
  ::ADS::DeviceInfo* _internal_mutable_left_controller();
  public:
  void unsafe_arena_set_allocated_left_controller(
      ::ADS::DeviceInfo* left_controller);
  ::ADS::DeviceInfo* unsafe_arena_release_left_controller();

  // .ADS.DeviceInfo right_controller = 4;
  bool has_right_controller() const;
  private:
  bool _internal_has_right_controller() const;
  public:
  void clear_right_controller();
  const ::ADS::DeviceInfo& right_controller() const;
  PROTOBUF_NODISCARD ::ADS::DeviceInfo* release_right_controller();
  ::ADS::DeviceInfo* mutable_right_controller();
  void set_allocated_right_controller(::ADS::DeviceInfo* right_controller);
  private:
  const ::ADS::DeviceInfo& _internal_right_controller() const;
  ::ADS::DeviceInfo* _internal_mutable_right_controller();
  public:
  void unsafe_arena_set_allocated_right_controller(
      ::ADS::DeviceInfo* right_controller);
  ::ADS::DeviceInfo* unsafe_arena_release_right_controller();

  // .ADS.Vector2 left_joystick = 5;
  bool has_left_joystick() const;
  private:
  bool _internal_has_left_joystick() const;
  public:
  void clear_left_joystick();
  const ::ADS::Vector2& left_joystick() const;
  PROTOBUF_NODISCARD ::ADS::Vector2* release_left_joystick();
  ::ADS::Vector2* mutable_left_joystick();
  void set_allocated_left_joystick(::ADS::Vector2* left_joystick);
  private:
  const ::ADS::Vector2& _internal_left_joystick() const;
  ::ADS::Vector2* _internal_mutable_left_joystick();
  public:
  void unsafe_arena_set_allocated_left_joystick(
      ::ADS::Vector2* left_joystick);
  ::ADS::Vector2* unsafe_arena_release_left_joystick();

  // .ADS.Vector2 right_joystick = 6;
  bool has_right_joystick() const;
  private:
  bool _internal_has_right_joystick() const;
  public:
  void clear_right_joystick();
  const ::ADS::Vector2& right_joystick() const;
  PROTOBUF_NODISCARD ::ADS::Vector2* release_right_joystick();
  ::ADS::Vector2* mutable_right_joystick();
  void set_allocated_right_joystick(::ADS::Vector2* right_joystick);
  private:
  const ::ADS::Vector2& _internal_right_joystick() const;
  ::ADS::Vector2* _internal_mutable_right_joystick();
  public:
  void unsafe_arena_set_allocated_right_joystick(
      ::ADS::Vector2* right_joystick);
  ::ADS::Vector2* unsafe_arena_release_right_joystick();

  // @@protoc_insertion_point(class_scope:ADS.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_name_;
  ::ADS::DeviceInfo* headset_;
  ::ADS::DeviceInfo* left_controller_;
  ::ADS::DeviceInfo* right_controller_;
  ::ADS::Vector2* left_joystick_;
  ::ADS::Vector2* right_joystick_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class Vector2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ADS.Vector2) */ {
 public:
  inline Vector2() : Vector2(nullptr) {}
  ~Vector2() override;
  explicit constexpr Vector2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector2(const Vector2& from);
  Vector2(Vector2&& from) noexcept
    : Vector2() {
    *this = ::std::move(from);
  }

  inline Vector2& operator=(const Vector2& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector2& operator=(Vector2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector2& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector2* internal_default_instance() {
    return reinterpret_cast<const Vector2*>(
               &_Vector2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Vector2& a, Vector2& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vector2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vector2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Vector2& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ADS.Vector2";
  }
  protected:
  explicit Vector2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:ADS.Vector2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class Position final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ADS.Position) */ {
 public:
  inline Position() : Position(nullptr) {}
  ~Position() override;
  explicit constexpr Position(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Position(const Position& from);
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Position& default_instance() {
    return *internal_default_instance();
  }
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Position* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Position& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Position& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ADS.Position";
  }
  protected:
  explicit Position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:ADS.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class Rotation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ADS.Rotation) */ {
 public:
  inline Rotation() : Rotation(nullptr) {}
  ~Rotation() override;
  explicit constexpr Rotation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Rotation(const Rotation& from);
  Rotation(Rotation&& from) noexcept
    : Rotation() {
    *this = ::std::move(from);
  }

  inline Rotation& operator=(const Rotation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rotation& operator=(Rotation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Rotation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Rotation* internal_default_instance() {
    return reinterpret_cast<const Rotation*>(
               &_Rotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Rotation& a, Rotation& b) {
    a.Swap(&b);
  }
  inline void Swap(Rotation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rotation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Rotation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Rotation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Rotation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Rotation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rotation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ADS.Rotation";
  }
  protected:
  explicit Rotation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kWFieldNumber = 4,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float w = 4;
  void clear_w();
  float w() const;
  void set_w(float value);
  private:
  float _internal_w() const;
  void _internal_set_w(float value);
  public:

  // @@protoc_insertion_point(class_scope:ADS.Rotation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  float w_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class DeviceInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ADS.DeviceInfo) */ {
 public:
  inline DeviceInfo() : DeviceInfo(nullptr) {}
  ~DeviceInfo() override;
  explicit constexpr DeviceInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceInfo(const DeviceInfo& from);
  DeviceInfo(DeviceInfo&& from) noexcept
    : DeviceInfo() {
    *this = ::std::move(from);
  }

  inline DeviceInfo& operator=(const DeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceInfo& operator=(DeviceInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceInfo* internal_default_instance() {
    return reinterpret_cast<const DeviceInfo*>(
               &_DeviceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DeviceInfo& a, DeviceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeviceInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeviceInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ADS.DeviceInfo";
  }
  protected:
  explicit DeviceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kRotationFieldNumber = 2,
  };
  // .ADS.Position position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::ADS::Position& position() const;
  PROTOBUF_NODISCARD ::ADS::Position* release_position();
  ::ADS::Position* mutable_position();
  void set_allocated_position(::ADS::Position* position);
  private:
  const ::ADS::Position& _internal_position() const;
  ::ADS::Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::ADS::Position* position);
  ::ADS::Position* unsafe_arena_release_position();

  // .ADS.Rotation rotation = 2;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::ADS::Rotation& rotation() const;
  PROTOBUF_NODISCARD ::ADS::Rotation* release_rotation();
  ::ADS::Rotation* mutable_rotation();
  void set_allocated_rotation(::ADS::Rotation* rotation);
  private:
  const ::ADS::Rotation& _internal_rotation() const;
  ::ADS::Rotation* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::ADS::Rotation* rotation);
  ::ADS::Rotation* unsafe_arena_release_rotation();

  // @@protoc_insertion_point(class_scope:ADS.DeviceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ADS::Position* position_;
  ::ADS::Rotation* rotation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class GameObject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ADS.GameObject) */ {
 public:
  inline GameObject() : GameObject(nullptr) {}
  ~GameObject() override;
  explicit constexpr GameObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameObject(const GameObject& from);
  GameObject(GameObject&& from) noexcept
    : GameObject() {
    *this = ::std::move(from);
  }

  inline GameObject& operator=(const GameObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameObject& operator=(GameObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameObject* internal_default_instance() {
    return reinterpret_cast<const GameObject*>(
               &_GameObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GameObject& a, GameObject& b) {
    a.Swap(&b);
  }
  inline void Swap(GameObject* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameObject>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameObject& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GameObject& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameObject* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ADS.GameObject";
  }
  protected:
  explicit GameObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kRotationFieldNumber = 2,
  };
  // .ADS.Position position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::ADS::Position& position() const;
  PROTOBUF_NODISCARD ::ADS::Position* release_position();
  ::ADS::Position* mutable_position();
  void set_allocated_position(::ADS::Position* position);
  private:
  const ::ADS::Position& _internal_position() const;
  ::ADS::Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::ADS::Position* position);
  ::ADS::Position* unsafe_arena_release_position();

  // .ADS.Rotation rotation = 2;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::ADS::Rotation& rotation() const;
  PROTOBUF_NODISCARD ::ADS::Rotation* release_rotation();
  ::ADS::Rotation* mutable_rotation();
  void set_allocated_rotation(::ADS::Rotation* rotation);
  private:
  const ::ADS::Rotation& _internal_rotation() const;
  ::ADS::Rotation* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::ADS::Rotation* rotation);
  ::ADS::Rotation* unsafe_arena_release_rotation();

  // @@protoc_insertion_point(class_scope:ADS.GameObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ADS::Position* position_;
  ::ADS::Rotation* rotation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class Session final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ADS.Session) */ {
 public:
  inline Session() : Session(nullptr) {}
  ~Session() override;
  explicit constexpr Session(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Session(const Session& from);
  Session(Session&& from) noexcept
    : Session() {
    *this = ::std::move(from);
  }

  inline Session& operator=(const Session& from) {
    CopyFrom(from);
    return *this;
  }
  inline Session& operator=(Session&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Session& default_instance() {
    return *internal_default_instance();
  }
  static inline const Session* internal_default_instance() {
    return reinterpret_cast<const Session*>(
               &_Session_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Session& a, Session& b) {
    a.Swap(&b);
  }
  inline void Swap(Session* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Session* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Session* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Session>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Session& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Session& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Session* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ADS.Session";
  }
  protected:
  explicit Session(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 2,
    kGameObjectsFieldNumber = 3,
    kSessionNameFieldNumber = 1,
  };
  // repeated .ADS.Player players = 2;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::ADS::Player* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ADS::Player >*
      mutable_players();
  private:
  const ::ADS::Player& _internal_players(int index) const;
  ::ADS::Player* _internal_add_players();
  public:
  const ::ADS::Player& players(int index) const;
  ::ADS::Player* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ADS::Player >&
      players() const;

  // repeated .ADS.GameObject game_objects = 3;
  int game_objects_size() const;
  private:
  int _internal_game_objects_size() const;
  public:
  void clear_game_objects();
  ::ADS::GameObject* mutable_game_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ADS::GameObject >*
      mutable_game_objects();
  private:
  const ::ADS::GameObject& _internal_game_objects(int index) const;
  ::ADS::GameObject* _internal_add_game_objects();
  public:
  const ::ADS::GameObject& game_objects(int index) const;
  ::ADS::GameObject* add_game_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ADS::GameObject >&
      game_objects() const;

  // string session_name = 1;
  void clear_session_name();
  const std::string& session_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_name();
  PROTOBUF_NODISCARD std::string* release_session_name();
  void set_allocated_session_name(std::string* session_name);
  private:
  const std::string& _internal_session_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_name(const std::string& value);
  std::string* _internal_mutable_session_name();
  public:

  // @@protoc_insertion_point(class_scope:ADS.Session)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ADS::Player > players_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ADS::GameObject > game_objects_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Player

// string player_name = 1;
inline void Player::clear_player_name() {
  player_name_.ClearToEmpty();
}
inline const std::string& Player::player_name() const {
  // @@protoc_insertion_point(field_get:ADS.Player.player_name)
  return _internal_player_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Player::set_player_name(ArgT0&& arg0, ArgT... args) {
 
 player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ADS.Player.player_name)
}
inline std::string* Player::mutable_player_name() {
  std::string* _s = _internal_mutable_player_name();
  // @@protoc_insertion_point(field_mutable:ADS.Player.player_name)
  return _s;
}
inline const std::string& Player::_internal_player_name() const {
  return player_name_.Get();
}
inline void Player::_internal_set_player_name(const std::string& value) {
  
  player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Player::_internal_mutable_player_name() {
  
  return player_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Player::release_player_name() {
  // @@protoc_insertion_point(field_release:ADS.Player.player_name)
  return player_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Player::set_allocated_player_name(std::string* player_name) {
  if (player_name != nullptr) {
    
  } else {
    
  }
  player_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (player_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    player_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ADS.Player.player_name)
}

// .ADS.DeviceInfo headset = 2;
inline bool Player::_internal_has_headset() const {
  return this != internal_default_instance() && headset_ != nullptr;
}
inline bool Player::has_headset() const {
  return _internal_has_headset();
}
inline void Player::clear_headset() {
  if (GetArenaForAllocation() == nullptr && headset_ != nullptr) {
    delete headset_;
  }
  headset_ = nullptr;
}
inline const ::ADS::DeviceInfo& Player::_internal_headset() const {
  const ::ADS::DeviceInfo* p = headset_;
  return p != nullptr ? *p : reinterpret_cast<const ::ADS::DeviceInfo&>(
      ::ADS::_DeviceInfo_default_instance_);
}
inline const ::ADS::DeviceInfo& Player::headset() const {
  // @@protoc_insertion_point(field_get:ADS.Player.headset)
  return _internal_headset();
}
inline void Player::unsafe_arena_set_allocated_headset(
    ::ADS::DeviceInfo* headset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(headset_);
  }
  headset_ = headset;
  if (headset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ADS.Player.headset)
}
inline ::ADS::DeviceInfo* Player::release_headset() {
  
  ::ADS::DeviceInfo* temp = headset_;
  headset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ADS::DeviceInfo* Player::unsafe_arena_release_headset() {
  // @@protoc_insertion_point(field_release:ADS.Player.headset)
  
  ::ADS::DeviceInfo* temp = headset_;
  headset_ = nullptr;
  return temp;
}
inline ::ADS::DeviceInfo* Player::_internal_mutable_headset() {
  
  if (headset_ == nullptr) {
    auto* p = CreateMaybeMessage<::ADS::DeviceInfo>(GetArenaForAllocation());
    headset_ = p;
  }
  return headset_;
}
inline ::ADS::DeviceInfo* Player::mutable_headset() {
  ::ADS::DeviceInfo* _msg = _internal_mutable_headset();
  // @@protoc_insertion_point(field_mutable:ADS.Player.headset)
  return _msg;
}
inline void Player::set_allocated_headset(::ADS::DeviceInfo* headset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete headset_;
  }
  if (headset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ADS::DeviceInfo>::GetOwningArena(headset);
    if (message_arena != submessage_arena) {
      headset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, headset, submessage_arena);
    }
    
  } else {
    
  }
  headset_ = headset;
  // @@protoc_insertion_point(field_set_allocated:ADS.Player.headset)
}

// .ADS.DeviceInfo left_controller = 3;
inline bool Player::_internal_has_left_controller() const {
  return this != internal_default_instance() && left_controller_ != nullptr;
}
inline bool Player::has_left_controller() const {
  return _internal_has_left_controller();
}
inline void Player::clear_left_controller() {
  if (GetArenaForAllocation() == nullptr && left_controller_ != nullptr) {
    delete left_controller_;
  }
  left_controller_ = nullptr;
}
inline const ::ADS::DeviceInfo& Player::_internal_left_controller() const {
  const ::ADS::DeviceInfo* p = left_controller_;
  return p != nullptr ? *p : reinterpret_cast<const ::ADS::DeviceInfo&>(
      ::ADS::_DeviceInfo_default_instance_);
}
inline const ::ADS::DeviceInfo& Player::left_controller() const {
  // @@protoc_insertion_point(field_get:ADS.Player.left_controller)
  return _internal_left_controller();
}
inline void Player::unsafe_arena_set_allocated_left_controller(
    ::ADS::DeviceInfo* left_controller) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(left_controller_);
  }
  left_controller_ = left_controller;
  if (left_controller) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ADS.Player.left_controller)
}
inline ::ADS::DeviceInfo* Player::release_left_controller() {
  
  ::ADS::DeviceInfo* temp = left_controller_;
  left_controller_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ADS::DeviceInfo* Player::unsafe_arena_release_left_controller() {
  // @@protoc_insertion_point(field_release:ADS.Player.left_controller)
  
  ::ADS::DeviceInfo* temp = left_controller_;
  left_controller_ = nullptr;
  return temp;
}
inline ::ADS::DeviceInfo* Player::_internal_mutable_left_controller() {
  
  if (left_controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::ADS::DeviceInfo>(GetArenaForAllocation());
    left_controller_ = p;
  }
  return left_controller_;
}
inline ::ADS::DeviceInfo* Player::mutable_left_controller() {
  ::ADS::DeviceInfo* _msg = _internal_mutable_left_controller();
  // @@protoc_insertion_point(field_mutable:ADS.Player.left_controller)
  return _msg;
}
inline void Player::set_allocated_left_controller(::ADS::DeviceInfo* left_controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete left_controller_;
  }
  if (left_controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ADS::DeviceInfo>::GetOwningArena(left_controller);
    if (message_arena != submessage_arena) {
      left_controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, left_controller, submessage_arena);
    }
    
  } else {
    
  }
  left_controller_ = left_controller;
  // @@protoc_insertion_point(field_set_allocated:ADS.Player.left_controller)
}

// .ADS.DeviceInfo right_controller = 4;
inline bool Player::_internal_has_right_controller() const {
  return this != internal_default_instance() && right_controller_ != nullptr;
}
inline bool Player::has_right_controller() const {
  return _internal_has_right_controller();
}
inline void Player::clear_right_controller() {
  if (GetArenaForAllocation() == nullptr && right_controller_ != nullptr) {
    delete right_controller_;
  }
  right_controller_ = nullptr;
}
inline const ::ADS::DeviceInfo& Player::_internal_right_controller() const {
  const ::ADS::DeviceInfo* p = right_controller_;
  return p != nullptr ? *p : reinterpret_cast<const ::ADS::DeviceInfo&>(
      ::ADS::_DeviceInfo_default_instance_);
}
inline const ::ADS::DeviceInfo& Player::right_controller() const {
  // @@protoc_insertion_point(field_get:ADS.Player.right_controller)
  return _internal_right_controller();
}
inline void Player::unsafe_arena_set_allocated_right_controller(
    ::ADS::DeviceInfo* right_controller) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(right_controller_);
  }
  right_controller_ = right_controller;
  if (right_controller) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ADS.Player.right_controller)
}
inline ::ADS::DeviceInfo* Player::release_right_controller() {
  
  ::ADS::DeviceInfo* temp = right_controller_;
  right_controller_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ADS::DeviceInfo* Player::unsafe_arena_release_right_controller() {
  // @@protoc_insertion_point(field_release:ADS.Player.right_controller)
  
  ::ADS::DeviceInfo* temp = right_controller_;
  right_controller_ = nullptr;
  return temp;
}
inline ::ADS::DeviceInfo* Player::_internal_mutable_right_controller() {
  
  if (right_controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::ADS::DeviceInfo>(GetArenaForAllocation());
    right_controller_ = p;
  }
  return right_controller_;
}
inline ::ADS::DeviceInfo* Player::mutable_right_controller() {
  ::ADS::DeviceInfo* _msg = _internal_mutable_right_controller();
  // @@protoc_insertion_point(field_mutable:ADS.Player.right_controller)
  return _msg;
}
inline void Player::set_allocated_right_controller(::ADS::DeviceInfo* right_controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete right_controller_;
  }
  if (right_controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ADS::DeviceInfo>::GetOwningArena(right_controller);
    if (message_arena != submessage_arena) {
      right_controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, right_controller, submessage_arena);
    }
    
  } else {
    
  }
  right_controller_ = right_controller;
  // @@protoc_insertion_point(field_set_allocated:ADS.Player.right_controller)
}

// .ADS.Vector2 left_joystick = 5;
inline bool Player::_internal_has_left_joystick() const {
  return this != internal_default_instance() && left_joystick_ != nullptr;
}
inline bool Player::has_left_joystick() const {
  return _internal_has_left_joystick();
}
inline void Player::clear_left_joystick() {
  if (GetArenaForAllocation() == nullptr && left_joystick_ != nullptr) {
    delete left_joystick_;
  }
  left_joystick_ = nullptr;
}
inline const ::ADS::Vector2& Player::_internal_left_joystick() const {
  const ::ADS::Vector2* p = left_joystick_;
  return p != nullptr ? *p : reinterpret_cast<const ::ADS::Vector2&>(
      ::ADS::_Vector2_default_instance_);
}
inline const ::ADS::Vector2& Player::left_joystick() const {
  // @@protoc_insertion_point(field_get:ADS.Player.left_joystick)
  return _internal_left_joystick();
}
inline void Player::unsafe_arena_set_allocated_left_joystick(
    ::ADS::Vector2* left_joystick) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(left_joystick_);
  }
  left_joystick_ = left_joystick;
  if (left_joystick) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ADS.Player.left_joystick)
}
inline ::ADS::Vector2* Player::release_left_joystick() {
  
  ::ADS::Vector2* temp = left_joystick_;
  left_joystick_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ADS::Vector2* Player::unsafe_arena_release_left_joystick() {
  // @@protoc_insertion_point(field_release:ADS.Player.left_joystick)
  
  ::ADS::Vector2* temp = left_joystick_;
  left_joystick_ = nullptr;
  return temp;
}
inline ::ADS::Vector2* Player::_internal_mutable_left_joystick() {
  
  if (left_joystick_ == nullptr) {
    auto* p = CreateMaybeMessage<::ADS::Vector2>(GetArenaForAllocation());
    left_joystick_ = p;
  }
  return left_joystick_;
}
inline ::ADS::Vector2* Player::mutable_left_joystick() {
  ::ADS::Vector2* _msg = _internal_mutable_left_joystick();
  // @@protoc_insertion_point(field_mutable:ADS.Player.left_joystick)
  return _msg;
}
inline void Player::set_allocated_left_joystick(::ADS::Vector2* left_joystick) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete left_joystick_;
  }
  if (left_joystick) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ADS::Vector2>::GetOwningArena(left_joystick);
    if (message_arena != submessage_arena) {
      left_joystick = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, left_joystick, submessage_arena);
    }
    
  } else {
    
  }
  left_joystick_ = left_joystick;
  // @@protoc_insertion_point(field_set_allocated:ADS.Player.left_joystick)
}

// .ADS.Vector2 right_joystick = 6;
inline bool Player::_internal_has_right_joystick() const {
  return this != internal_default_instance() && right_joystick_ != nullptr;
}
inline bool Player::has_right_joystick() const {
  return _internal_has_right_joystick();
}
inline void Player::clear_right_joystick() {
  if (GetArenaForAllocation() == nullptr && right_joystick_ != nullptr) {
    delete right_joystick_;
  }
  right_joystick_ = nullptr;
}
inline const ::ADS::Vector2& Player::_internal_right_joystick() const {
  const ::ADS::Vector2* p = right_joystick_;
  return p != nullptr ? *p : reinterpret_cast<const ::ADS::Vector2&>(
      ::ADS::_Vector2_default_instance_);
}
inline const ::ADS::Vector2& Player::right_joystick() const {
  // @@protoc_insertion_point(field_get:ADS.Player.right_joystick)
  return _internal_right_joystick();
}
inline void Player::unsafe_arena_set_allocated_right_joystick(
    ::ADS::Vector2* right_joystick) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(right_joystick_);
  }
  right_joystick_ = right_joystick;
  if (right_joystick) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ADS.Player.right_joystick)
}
inline ::ADS::Vector2* Player::release_right_joystick() {
  
  ::ADS::Vector2* temp = right_joystick_;
  right_joystick_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ADS::Vector2* Player::unsafe_arena_release_right_joystick() {
  // @@protoc_insertion_point(field_release:ADS.Player.right_joystick)
  
  ::ADS::Vector2* temp = right_joystick_;
  right_joystick_ = nullptr;
  return temp;
}
inline ::ADS::Vector2* Player::_internal_mutable_right_joystick() {
  
  if (right_joystick_ == nullptr) {
    auto* p = CreateMaybeMessage<::ADS::Vector2>(GetArenaForAllocation());
    right_joystick_ = p;
  }
  return right_joystick_;
}
inline ::ADS::Vector2* Player::mutable_right_joystick() {
  ::ADS::Vector2* _msg = _internal_mutable_right_joystick();
  // @@protoc_insertion_point(field_mutable:ADS.Player.right_joystick)
  return _msg;
}
inline void Player::set_allocated_right_joystick(::ADS::Vector2* right_joystick) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete right_joystick_;
  }
  if (right_joystick) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ADS::Vector2>::GetOwningArena(right_joystick);
    if (message_arena != submessage_arena) {
      right_joystick = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, right_joystick, submessage_arena);
    }
    
  } else {
    
  }
  right_joystick_ = right_joystick;
  // @@protoc_insertion_point(field_set_allocated:ADS.Player.right_joystick)
}

// -------------------------------------------------------------------

// Vector2

// float x = 1;
inline void Vector2::clear_x() {
  x_ = 0;
}
inline float Vector2::_internal_x() const {
  return x_;
}
inline float Vector2::x() const {
  // @@protoc_insertion_point(field_get:ADS.Vector2.x)
  return _internal_x();
}
inline void Vector2::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Vector2::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:ADS.Vector2.x)
}

// float y = 2;
inline void Vector2::clear_y() {
  y_ = 0;
}
inline float Vector2::_internal_y() const {
  return y_;
}
inline float Vector2::y() const {
  // @@protoc_insertion_point(field_get:ADS.Vector2.y)
  return _internal_y();
}
inline void Vector2::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Vector2::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:ADS.Vector2.y)
}

// -------------------------------------------------------------------

// Position

// float x = 1;
inline void Position::clear_x() {
  x_ = 0;
}
inline float Position::_internal_x() const {
  return x_;
}
inline float Position::x() const {
  // @@protoc_insertion_point(field_get:ADS.Position.x)
  return _internal_x();
}
inline void Position::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Position::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:ADS.Position.x)
}

// float y = 2;
inline void Position::clear_y() {
  y_ = 0;
}
inline float Position::_internal_y() const {
  return y_;
}
inline float Position::y() const {
  // @@protoc_insertion_point(field_get:ADS.Position.y)
  return _internal_y();
}
inline void Position::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Position::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:ADS.Position.y)
}

// float z = 3;
inline void Position::clear_z() {
  z_ = 0;
}
inline float Position::_internal_z() const {
  return z_;
}
inline float Position::z() const {
  // @@protoc_insertion_point(field_get:ADS.Position.z)
  return _internal_z();
}
inline void Position::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Position::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:ADS.Position.z)
}

// -------------------------------------------------------------------

// Rotation

// float x = 1;
inline void Rotation::clear_x() {
  x_ = 0;
}
inline float Rotation::_internal_x() const {
  return x_;
}
inline float Rotation::x() const {
  // @@protoc_insertion_point(field_get:ADS.Rotation.x)
  return _internal_x();
}
inline void Rotation::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Rotation::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:ADS.Rotation.x)
}

// float y = 2;
inline void Rotation::clear_y() {
  y_ = 0;
}
inline float Rotation::_internal_y() const {
  return y_;
}
inline float Rotation::y() const {
  // @@protoc_insertion_point(field_get:ADS.Rotation.y)
  return _internal_y();
}
inline void Rotation::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Rotation::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:ADS.Rotation.y)
}

// float z = 3;
inline void Rotation::clear_z() {
  z_ = 0;
}
inline float Rotation::_internal_z() const {
  return z_;
}
inline float Rotation::z() const {
  // @@protoc_insertion_point(field_get:ADS.Rotation.z)
  return _internal_z();
}
inline void Rotation::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Rotation::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:ADS.Rotation.z)
}

// float w = 4;
inline void Rotation::clear_w() {
  w_ = 0;
}
inline float Rotation::_internal_w() const {
  return w_;
}
inline float Rotation::w() const {
  // @@protoc_insertion_point(field_get:ADS.Rotation.w)
  return _internal_w();
}
inline void Rotation::_internal_set_w(float value) {
  
  w_ = value;
}
inline void Rotation::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:ADS.Rotation.w)
}

// -------------------------------------------------------------------

// DeviceInfo

// .ADS.Position position = 1;
inline bool DeviceInfo::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool DeviceInfo::has_position() const {
  return _internal_has_position();
}
inline void DeviceInfo::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::ADS::Position& DeviceInfo::_internal_position() const {
  const ::ADS::Position* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::ADS::Position&>(
      ::ADS::_Position_default_instance_);
}
inline const ::ADS::Position& DeviceInfo::position() const {
  // @@protoc_insertion_point(field_get:ADS.DeviceInfo.position)
  return _internal_position();
}
inline void DeviceInfo::unsafe_arena_set_allocated_position(
    ::ADS::Position* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ADS.DeviceInfo.position)
}
inline ::ADS::Position* DeviceInfo::release_position() {
  
  ::ADS::Position* temp = position_;
  position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ADS::Position* DeviceInfo::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:ADS.DeviceInfo.position)
  
  ::ADS::Position* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::ADS::Position* DeviceInfo::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::ADS::Position>(GetArenaForAllocation());
    position_ = p;
  }
  return position_;
}
inline ::ADS::Position* DeviceInfo::mutable_position() {
  ::ADS::Position* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:ADS.DeviceInfo.position)
  return _msg;
}
inline void DeviceInfo::set_allocated_position(::ADS::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ADS::Position>::GetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:ADS.DeviceInfo.position)
}

// .ADS.Rotation rotation = 2;
inline bool DeviceInfo::_internal_has_rotation() const {
  return this != internal_default_instance() && rotation_ != nullptr;
}
inline bool DeviceInfo::has_rotation() const {
  return _internal_has_rotation();
}
inline void DeviceInfo::clear_rotation() {
  if (GetArenaForAllocation() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
}
inline const ::ADS::Rotation& DeviceInfo::_internal_rotation() const {
  const ::ADS::Rotation* p = rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::ADS::Rotation&>(
      ::ADS::_Rotation_default_instance_);
}
inline const ::ADS::Rotation& DeviceInfo::rotation() const {
  // @@protoc_insertion_point(field_get:ADS.DeviceInfo.rotation)
  return _internal_rotation();
}
inline void DeviceInfo::unsafe_arena_set_allocated_rotation(
    ::ADS::Rotation* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation_);
  }
  rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ADS.DeviceInfo.rotation)
}
inline ::ADS::Rotation* DeviceInfo::release_rotation() {
  
  ::ADS::Rotation* temp = rotation_;
  rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ADS::Rotation* DeviceInfo::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:ADS.DeviceInfo.rotation)
  
  ::ADS::Rotation* temp = rotation_;
  rotation_ = nullptr;
  return temp;
}
inline ::ADS::Rotation* DeviceInfo::_internal_mutable_rotation() {
  
  if (rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::ADS::Rotation>(GetArenaForAllocation());
    rotation_ = p;
  }
  return rotation_;
}
inline ::ADS::Rotation* DeviceInfo::mutable_rotation() {
  ::ADS::Rotation* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:ADS.DeviceInfo.rotation)
  return _msg;
}
inline void DeviceInfo::set_allocated_rotation(::ADS::Rotation* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ADS::Rotation>::GetOwningArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:ADS.DeviceInfo.rotation)
}

// -------------------------------------------------------------------

// GameObject

// .ADS.Position position = 1;
inline bool GameObject::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool GameObject::has_position() const {
  return _internal_has_position();
}
inline void GameObject::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::ADS::Position& GameObject::_internal_position() const {
  const ::ADS::Position* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::ADS::Position&>(
      ::ADS::_Position_default_instance_);
}
inline const ::ADS::Position& GameObject::position() const {
  // @@protoc_insertion_point(field_get:ADS.GameObject.position)
  return _internal_position();
}
inline void GameObject::unsafe_arena_set_allocated_position(
    ::ADS::Position* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ADS.GameObject.position)
}
inline ::ADS::Position* GameObject::release_position() {
  
  ::ADS::Position* temp = position_;
  position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ADS::Position* GameObject::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:ADS.GameObject.position)
  
  ::ADS::Position* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::ADS::Position* GameObject::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::ADS::Position>(GetArenaForAllocation());
    position_ = p;
  }
  return position_;
}
inline ::ADS::Position* GameObject::mutable_position() {
  ::ADS::Position* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:ADS.GameObject.position)
  return _msg;
}
inline void GameObject::set_allocated_position(::ADS::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ADS::Position>::GetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:ADS.GameObject.position)
}

// .ADS.Rotation rotation = 2;
inline bool GameObject::_internal_has_rotation() const {
  return this != internal_default_instance() && rotation_ != nullptr;
}
inline bool GameObject::has_rotation() const {
  return _internal_has_rotation();
}
inline void GameObject::clear_rotation() {
  if (GetArenaForAllocation() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
}
inline const ::ADS::Rotation& GameObject::_internal_rotation() const {
  const ::ADS::Rotation* p = rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::ADS::Rotation&>(
      ::ADS::_Rotation_default_instance_);
}
inline const ::ADS::Rotation& GameObject::rotation() const {
  // @@protoc_insertion_point(field_get:ADS.GameObject.rotation)
  return _internal_rotation();
}
inline void GameObject::unsafe_arena_set_allocated_rotation(
    ::ADS::Rotation* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation_);
  }
  rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ADS.GameObject.rotation)
}
inline ::ADS::Rotation* GameObject::release_rotation() {
  
  ::ADS::Rotation* temp = rotation_;
  rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ADS::Rotation* GameObject::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:ADS.GameObject.rotation)
  
  ::ADS::Rotation* temp = rotation_;
  rotation_ = nullptr;
  return temp;
}
inline ::ADS::Rotation* GameObject::_internal_mutable_rotation() {
  
  if (rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::ADS::Rotation>(GetArenaForAllocation());
    rotation_ = p;
  }
  return rotation_;
}
inline ::ADS::Rotation* GameObject::mutable_rotation() {
  ::ADS::Rotation* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:ADS.GameObject.rotation)
  return _msg;
}
inline void GameObject::set_allocated_rotation(::ADS::Rotation* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ADS::Rotation>::GetOwningArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:ADS.GameObject.rotation)
}

// -------------------------------------------------------------------

// Session

// string session_name = 1;
inline void Session::clear_session_name() {
  session_name_.ClearToEmpty();
}
inline const std::string& Session::session_name() const {
  // @@protoc_insertion_point(field_get:ADS.Session.session_name)
  return _internal_session_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Session::set_session_name(ArgT0&& arg0, ArgT... args) {
 
 session_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ADS.Session.session_name)
}
inline std::string* Session::mutable_session_name() {
  std::string* _s = _internal_mutable_session_name();
  // @@protoc_insertion_point(field_mutable:ADS.Session.session_name)
  return _s;
}
inline const std::string& Session::_internal_session_name() const {
  return session_name_.Get();
}
inline void Session::_internal_set_session_name(const std::string& value) {
  
  session_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Session::_internal_mutable_session_name() {
  
  return session_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Session::release_session_name() {
  // @@protoc_insertion_point(field_release:ADS.Session.session_name)
  return session_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Session::set_allocated_session_name(std::string* session_name) {
  if (session_name != nullptr) {
    
  } else {
    
  }
  session_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    session_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ADS.Session.session_name)
}

// repeated .ADS.Player players = 2;
inline int Session::_internal_players_size() const {
  return players_.size();
}
inline int Session::players_size() const {
  return _internal_players_size();
}
inline void Session::clear_players() {
  players_.Clear();
}
inline ::ADS::Player* Session::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:ADS.Session.players)
  return players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ADS::Player >*
Session::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:ADS.Session.players)
  return &players_;
}
inline const ::ADS::Player& Session::_internal_players(int index) const {
  return players_.Get(index);
}
inline const ::ADS::Player& Session::players(int index) const {
  // @@protoc_insertion_point(field_get:ADS.Session.players)
  return _internal_players(index);
}
inline ::ADS::Player* Session::_internal_add_players() {
  return players_.Add();
}
inline ::ADS::Player* Session::add_players() {
  ::ADS::Player* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:ADS.Session.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ADS::Player >&
Session::players() const {
  // @@protoc_insertion_point(field_list:ADS.Session.players)
  return players_;
}

// repeated .ADS.GameObject game_objects = 3;
inline int Session::_internal_game_objects_size() const {
  return game_objects_.size();
}
inline int Session::game_objects_size() const {
  return _internal_game_objects_size();
}
inline void Session::clear_game_objects() {
  game_objects_.Clear();
}
inline ::ADS::GameObject* Session::mutable_game_objects(int index) {
  // @@protoc_insertion_point(field_mutable:ADS.Session.game_objects)
  return game_objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ADS::GameObject >*
Session::mutable_game_objects() {
  // @@protoc_insertion_point(field_mutable_list:ADS.Session.game_objects)
  return &game_objects_;
}
inline const ::ADS::GameObject& Session::_internal_game_objects(int index) const {
  return game_objects_.Get(index);
}
inline const ::ADS::GameObject& Session::game_objects(int index) const {
  // @@protoc_insertion_point(field_get:ADS.Session.game_objects)
  return _internal_game_objects(index);
}
inline ::ADS::GameObject* Session::_internal_add_game_objects() {
  return game_objects_.Add();
}
inline ::ADS::GameObject* Session::add_game_objects() {
  ::ADS::GameObject* _add = _internal_add_game_objects();
  // @@protoc_insertion_point(field_add:ADS.Session.game_objects)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ADS::GameObject >&
Session::game_objects() const {
  // @@protoc_insertion_point(field_list:ADS.Session.game_objects)
  return game_objects_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ADS

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_game_2eproto
